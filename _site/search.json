[
  
    {
      "title"    : "http의 구조 / 요소",
      "title-lower"    : "http의 구조 / 요소",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "IT",
      "tags"     : "",
      "url"      : "/it/2023/01/30/itPost-http.html",
      "date"     : "2023-01-30 00:00:00 +0900",
      "content"     : "HTTP의 구조HTTP는 HTML 문서와 같은 텍스트로 되어있는 리소스(데이터)들을 가져올 수 있도록 해주는 프로토콜(통신규약)이다. 프로토콜이란 컴퓨터들끼리 HTML 파일을 주고받을 수 있게 도와주는 소통방식 또는 약속이다.클라이언트와 서버 간의 통신을 효율적으로 하기 위한 HTTP의 특징에 대해 적어보겠다.ConnectionlessHTTP의 첫번째..."
    } ,
  
    {
      "title"    : "Javascript-04. Promise.all / Promise.race",
      "title-lower"    : "javascript-04. promise.all / promise.race",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Javascript",
      "tags"     : "",
      "url"      : "/javascript/2023/01/28/javascript-04.html",
      "date"     : "2023-01-28 00:00:00 +0900",
      "content"     : "Javascript-04. Promise.all / Promise.race앞서 작성한 글들을 통해 자바스크립트에서 promise와 async/await를 사용하여 비동기 작업을 쉽게 사용하는 방법도 알아보았다.그렇다면 여러 개의 비동기 처리를 한 번에 하고 싶다면 어떻게 해야할까?우선 여러 개의 promise를 작성해보자.function wait (s..."
    } ,
  
    {
      "title"    : "Javascript-03. async와 await",
      "title-lower"    : "javascript-03. async와 await",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Javascript",
      "tags"     : "",
      "url"      : "/javascript/2023/01/22/javascript-03.html",
      "date"     : "2023-01-22 00:00:00 +0900",
      "content"     : "Javascript-03. async와 await이번에는 자바스크립트에서 비동기 처리 작업을 할 때 promise를 좀 더 쉽게 사용할 수 있게 해주는 async/await 라는 문법에 대해 작성하겠다.우선 promise를 만드는 함수를 작성해보자function wait (sec) {    return new Promise (resolve =&amp;..."
    } ,
  
    {
      "title"    : "Javascript-02. Promise",
      "title-lower"    : "javascript-02. promise",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Javascript",
      "tags"     : "",
      "url"      : "/javascript/2023/01/15/javascript-02.html",
      "date"     : "2023-01-15 00:00:00 +0900",
      "content"     : "Javascript-02. PromisePromise는 비동기 작업을 편하게 처리할 수 있도록 ES6에 도입된 기능이다.그 전까지는 비동기 작업을 위해 callBack함수로 처리를 해야했는데, 비동기 작업이 많아질 경우 코드가 너무 깊어지고 복잡해져 한 눈에 보기 힘들다는 단점이 있었다.📍 Promise는 원래 라이브러리로 존재했지만, 인기가 많아지고..."
    } ,
  
    {
      "title"    : "React의 라이프 사이클 메서드",
      "title-lower"    : "react의 라이프 사이클 메서드",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "",
      "url"      : "/2023/01/08/react-life-cycle-method.html",
      "date"     : "2023-01-08 00:00:00 +0900",
      "content"     : "React의 Hooks 1. useEffect모든 리액트 컴포넌트에는 라이프사이클이 존재한다.라이프 사이클(life-cycle)이란 직역하자면 생명 주기라는 뜻이다.컴포넌트의 수명은 페이지 준비 과정에서 시작되어 페이지에서 사라질때 끝난다.첫 렌더링에 특정 작업이 함께 이루어져야 하는 경우 혹은 컴포넌트를 업데이트 하기 전과 하고 나서 처리해야 하는 ..."
    } ,
  
    {
      "title"    : "Javascript-01. 동기 / 비동기 처리",
      "title-lower"    : "javascript-01. 동기 / 비동기 처리",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Javascript",
      "tags"     : "",
      "url"      : "/javascript/2023/01/08/javascript-01.html",
      "date"     : "2023-01-08 00:00:00 +0900",
      "content"     : "Javascript-01. 동기 / 비동기 처리이번 글에서는 자바스크립트에서 비동기 처리를 어떻게 하는지에 대해서 작성하겠다.우선 동기적 처리와 비동기적 처리가 어떻게 다른지에 대한 설명을 아래 그림을 통해 알아보자.작업을 동기적으로 처리하게 된다면, 그림의 동기적 처리 부분처럼 순차적으로 작업을 진행하게 된다.작업이 끝날때까지 기다리는 동안 중지상태..."
    } 
  
]