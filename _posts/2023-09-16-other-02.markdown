---
layout: post
title:  "컴포넌트 만들기 - Modal"

[//]: # (date:   2023-01-02 21:34:36 +0900)

categories: other
---

[//]: # (<h1>Introduction</h1>)

## 목차

### 1. React 컴포넌트(Component)란?
### 2. 모달 컴포넌트 만들기
### 3. 원하는 페이지에서 모달 컴포넌트 불러오기


----



### 1. React 컴포넌트(Component)란?


프로젝트를 진행하다보면 각각 다른 페이지에서 공통적으로 필요한 기능이 생긴다.   
필요할 때마다 같은 코드를 계속 입력하면 중복 코드 조각이 늘어나게 되고, 레이아웃과 디자인 변경, 서버로부터 받아온 응답 데이터의 형식이 변하는 경우 모든 페이지를 일일이 수정해줘야하는 번거로움이 발생한다.  
이를 어느 한 곳에서 관리하고, 필요할 때 가져다 쓴다면 어떨까?


React의 컴포넌트는 웹 애플리케이션의 재사용 가능한 부분을 관리하기 위한 요소다.   
React는 여러 개의 컴포넌트로 구성되며, 공통적으로 사용하는 버튼과 네비게이션 바, 그리고 모달과 같은 구성 요소들을 컴포넌트로 만들어 사용할 수 있다.


이번 포스트에서는 리액트 프로젝트의 모든 곳에서 사용 가능한 모달을 만들고 실제 페이지에서 어떤식으로 가져다 쓸 수 있는 지 기록할 예정이다.   
우선, 위에 작성한 내용을 바탕으로 컴포넌트에 대해 정리한 내용은 다음과 같다.

- 재사용성: 리액트 컴포넌트는 재사용이 가능하다. 동일한 컴포넌트를 여러 곳에서 사용할 수 있기 때문에 코드의 재사용성과 유지 보수성이 향상된다.
- State(상태)와 Props: 리액트 컴포넌트는 상태와 props를 가진다. 상태는 컴포넌트 내에서 변경 가능한 데이터를 나타내며, props는 컴포넌트에 전달되는 데이터이다. 이는 컴포넌트를 동적으로 업데이트하며 자유롭게 데이터를 넘겨받는 것을 가능하게 한다.
- 리액트는 이벤트 핸들러를 컴포넌트에 추가하여 사용자 입력에 대응하고, 상태를 업데이트 한다.



### 2. 모달 컴포넌트 만들기


우선 A라는 페이지와 B라는 페이지가 있다고 하자.   
A페이지에서는 input 태그 안에 어떤 값을 입력한 후, 확인 버튼을 눌러 모달을 띄울 수 있고, 해당 모달에는 사용자가 입력한 값이 함께 출력되어야 한다.   
B페이지에서는 응모하기 버튼 하나만 존재하고, 버튼을 누르면 별다른 추가 문구 없이 응모가 완료되었습니다!라는 메세지만 확인 가능하다.   

<img src="/assets/other/img.png" height="400" width="550">



이때, 두 페이지에서 사용하는 모달을 한 곳에서 관리하려고 한다.   

먼저 새로운 페이지에 다음과 같이 기본 틀을 먼저 작성해준다.

```javascript
import React from "react";

const TestModal = () => {
  return (
    <div>
      
    </div>
  );
};

export default TestModal;
```

export default 문은 리액트 컴포넌트를 다른 파일에서 가져와서 사용할 수 있도록 내보내기 위해 사용된다.   

이제 레이아웃을 만들 차례이다.   
내가 만드려는 모달의 조건은 다음과 같다.

1. 헤더에 페이지마다 각각 다른 이름을 넣을 것이다.
2. body(모달의 몸통)에는 각 페이지에서 원하는 메세지를 띄울 수 있어야한다.
3. 모달 푸터에는 버튼의 유무와 확인 혹은 취소 등의 이름을 지정할 수 있어야 한다.
4. 버튼 클릭 시 모달이 닫혀야한다.

앞서 설명한 것처럼, react에서는 props를 통해 컴포넌트로 데이터를 전달할 수 있다.
위에 제시한 조건에 따라 모달은 다른 페이지에서 각 다른 내용을 받아오기 때문에 하드코딩으로 내용을 작성하는게 아닌, props로 해당 내용을 받아와 화면에 표출해야한다.

아래 코드를 보자

```javascript
import * as React from 'react'

interface Props { // Props를 받아오기 위한 인터페이스를 생성. 컴포넌트가 어떤 props를 받아올지 정의한다.
    body: string
    header?: string // ?: 해당 props가 필수 요건이 아님을 명시한다.
    textConfirm?: string
    buttonType?: string
    showButton?: boolean
}

// 상단에 작성한 interface에서 props를 받아와 사용할 수 있게 한다.
const TestModal = (
    {
        body, 
        header,
        textConfirm = '확인', // interface에서 필수요건이 아니라고 명시했기 때문에 기본 값을 지정해준다.
        buttonType = 'two',
        showButton = true,
    }: Props) => {
    return (
        <div> // 모달 전체를 감쌀 div 태그를 하나 넣어준다. 레이아웃 지정을 위함!
            <div>{header}</div>
            <div>{body}</div>
            {showButton ? ( // showButton을 false로 지정할 경우, 버튼없는 모달이 생성될 것이다.
                <div>
                    <button>
                        {buttonType === 'two' && ( // ButtonType이 two라면 버튼 두 개가 등장한다.
                            <>
                                <button>예</button>
                                <button>아니오</button>
                            </>
                        )}
                        {buttonType === 'confirm' && ( // ButtonType이 confirm이라면 버튼 한 개가 등장한다.
                            <button>{textConfirm}</button> // 버튼 이름을 페이지 별로 지정할 수 있다.
                        )}
                    </button>
                </div>
            ) : (<></>)}
        </div>
    )
}
export default SModal
```


여기까지 구현한 모습은 다음과 같다.

<img src="/assets/other/test.png">

입력받은 header와 body값도 없고, 정말 못생겼지만 기능 구현을 먼저 해보자.   
이제 모달이 활성화 된 상태라고 가정하고, 버튼을 누르면 모달이 닫히도록 만들어야 한다.
handleClose라는 함수를 만들어 모달의 활성과 비활성을 관리해보도록 하겠다.


```javascript
interface Props {
    body: string
    header?: string
    textConfirm?: string
    buttonType?: string
    showButton?: boolean
    setShow: any
    show: any
}

const TestModal = (
    {
        body,
        header,
        textConfirm = '확인',
        buttonType = 'two',
        showButton = true,
        setShow,
        show
    }: Props) => {

    const handleClose = () => { // 모달을 비활성화로 만들어주는 부분
        setShow(false)
    }
    return (
        show ? // 페이지에서 받아온 show가 true일 경우 모달 활성화
            <>
                <div style={{display: 'block'}}>
                    <div>{header}</div>
                    <div>{body}</div>
                    {showButton ? (
                        <div>
                            <button>
                                {buttonType === 'two' && (
                                    <>
                                        <button onClick={handleClose}>예</button>
                                        <button onClick={handleClose}>아니오</button>
                                    </>
                                )}
                                {buttonType === 'confirm' && (
                                    <button onClick={handleClose}>{textConfirm}</button>
                                )}
                            </button>
                        </div>
                    ) : (<></>)}
                </div>
            </> : <></>
    )
```

여기까지 성공적으로 작성했다면, 이제 페이지에서 해당 모달을 불러와 각 입력값을 넣어줘야 한다.   
컴포넌트를 호출하려면 import를 통해 해당 컴포넌트를 사용하겠다는 의사표시를 해야한다.


### 3. 원하는 페이지에서 모달 컴포넌트 불러오기

```javascript
import TestModal from "../../../components/TestModal"
```
위 import 구문을 최상단에 추가하거나, 혹은 사용하려는 위치에서 TestModal이라고 입력만 해도 보통의 경우엔 자동으로 import가 된다.

```javascript
A 페이지--------

const [showTestModal, setShowTestModal] = useState(false); // 모달의 활성/비활성 상태를 관리
const [inputValue, setInputValue] = useState('') //input태그안에 입력되는 값 관리
const onChangeInputValue = (e) => { // input태그의 변화를 감지하여 inputValue에 담아주는 부분
    setInputValue(e.target.value)
}
.
.
.
return (
    <div>
        <input onChange={onChangeInputValue}/> //input태그에 입력되는 값은 onChangeInputValue 함수로 넘어간다
        <button onClick={() => setShowTestModal(true)}>확인</button> //  버튼 클릭 시 showTestModal 값은 true로 변경된다
        <TestModal
            setShow={setShowTestModal} 
            show={showTestModal}  
            body={inputValue}
        />
    </div>
)
```

위 코드를 살펴보자.
우선 TestModal을 불러와 필수요건들을 확인한다. 필수요건은 현재 show, setShow, body로 지정해두었다.   
A페이지에서는 input태그 안에 값을 입력한 후, 확인 버튼을 누르면 입력한 값이 모달에 떠야한다.   

따라서
- input 태그 안에 입력되는 값을 감지할 함수
- 감지된 input의 값을 담아둘 곳
- 확인버튼 클릭 시 showTestModal이 true로 변경

이 세 가지가 필요한 것을 알 수 있다.

input 태그에 onChange를 사용해 입력한 값을 onChangeInputValue 함수를 호출하여 inputValue에 넣어준다.   
그리고 확인 버튼에 onClick 이벤트를 통해 showTestModal의 값을 true로 바꿔주면 된다.

마찬가지로 B페이지에서도 다음과 같이 입력해준다.

```javascript
B페이지 -------
<button onClick={() => setShowTestModal(true)}>응모하기</button>
<TestModal
    setShow={setShowTestModal} 
    show={showTestModal}  
    body={'응모가 완료되었습니다!'}
/>
```

이제 원하는대로 레이아웃을 수정해 준 후, A페이지와 B페이지에서의 모달을 비교해보겠다.
<img src="/assets/other/pageA.png">

<img src="/assets/other/pageB.png">



<style>
.text {
    border: 1px solid #dcdcdc;
    padding: 10px;
}
</style>