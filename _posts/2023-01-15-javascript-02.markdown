---
layout: post
title:  "Javascript-02. Promise"

[//]: # (date:   2023-01-02 21:34:36 +0900)

categories: Javascript
---

[//]: # (<h1>Introduction</h1>)

<h3>Javascript-02. Promise</h3>

Promise는 비동기 작업을 편하게 처리할 수 있도록 ES6에 도입된 기능이다.<br />
그 전까지는 비동기 작업을 위해 callBack함수로 처리를 해야했는데, 비동기 작업이 많아질 경우 코드가 너무 깊어지고 복잡해져 한 눈에 보기 힘들다는 단점이 있었다.

<div style="background:#f2f2f2;text-align: center">
📍 Promise는 원래 라이브러리로 존재했지만, 인기가 많아지고 필수 요소가 되다 보니 자바스크립트의 기본 기능으로 도입되었다고 한다.
</div>
<br />
<br />
우선 숫자 n을 파라미터로 받아와서 다섯번에 걸쳐 1초마다 1씩 더하여 출력하는 작업을 setTimeout과 callback을 통해 작성해보겠다.



```javascript
function increaseNumber (n, callback) {
    setTimeout(()=> {
        const increased = n + 1;
        console.log(increased)
        if(callback) {
            callback(increased)
        }
    },1000)
}

increaseNumber(0, n => {
    increaseNumber(n, n => {
        increaseNumber(n, n=> {
            increaseNumber(n, n=> {
                increaseNumber(n, n=> {
                    console.log('드디어 끝..')
                })
            })
        })
    })
});

```
기존 callback을 사용하여 비동기 작업을 수행한 코드이다. 
하단에 increaseNumber(0, n=> {})을 호출하여 해당 작업이 끝난 후 다시 호출(callback)해주고, 1씩 더해주어 총 5회가 더해진 후 콘솔로 '드디어 끝..'이라는 문자가 찍히도록 작성하였다.

결과는 다음과 같다.


<img src="/assets/javascript-02/javascript-02-1.png" height="200" width="250" >


위와 같이 작성된 코드는 점점 코드의 깊이가 깊어져 더 많은 작업을 수행하게 된다면 한 눈에 확인하기도 어렵고, 복잡하게 보인다.

이런 코드를 바로 **callback 지옥**이라고 한다.
이 지옥에서 빠져나가기 위해 promise를 사용하여 같은 코드를 작성해보겠다.

<br />
<br />

<h3>우선 promise를 만드는 법부터 알아보자.</h3>


promise를 사용하여 1초가 흐른 후 각각 성공, 실패하는 코드를 만들어 보았다.<br />
promise를 만들기 위해서는 new Promise라는 구문을 사용하여 매개변수로 resolve와 reject라는 파라미터를 받아와야 한다.<br />
promise는 성공할 수도 있고 실패할 수도 있는데, 성공 시에는 resolve로 성공한 값을 반환하여 준다(1번 코드).<br/>

```javascript
1. 성공하는 경우
const makePromise = new Promise((resolve, reject) => { //resolve와 reject 파라미터 받아오기
    setTimeout(()=> {
        resolve('결과')
    },1000)
})

makePromise.then(result => { // 1초 후에 할 작업
    console.log(result)
})


2. 실패하는 경우
const makePromise = new Promise((resolve, reject) => {
    setTimeout(()=> {
        reject(new Error()) // reject의 경우에는 new Error를 넣어줘야함
    },1000)
})

makePromise.then(result => {
    console.log(result)
}).catch(e => {
    console.error(e)
})

```

실패 시에는 reject에 new Error를 넣어주고 하단에 catch를 사용하여 에러를 잡아내면 해당 에러를 1초 후에 콘솔에서 확인할 수 있게 된다(2번 코드).


간단한 promise 사용법을 익혔으니 이번에는 promise를 만드는 함수를 작성해보자.


```javascript
function increaseNumber(n) { // 여기서는 따로 callback을 받아오지 않는다.
    return new Promise((resolve, reject) => {
        setTimeout(()=> {
            const value = n + 1 // 파라미터로 받아온 n에 1을 더해준다.
            if (value === 5) {
                const error = new Error()
                reject(error)
                return
            }
            console.log(value) // reject가 아닐경우 찍힐 콘솔
            resolve(value)
        },1000)
    })
}

increaseNumber(0).then(n => {
    console.log('결과:', n)
})

```


값이 5가되면 실패처리가 되는 함수를 만들어 보았다.
우선 결과부터 보자.


<img src="/assets/javascript-02/javascript-02-2.png" height="150" width="250" >

0을 파라미터로 보내주고, 0이 들어온 n에 1을 더해줬으니 반환값(value) 1이 잘 찍힌 것을 확인할 수 있다.

**그런데, 여기까지 보면 결국엔 함수를 등록해야 하니, 기존 callback 함수와 크게 다르지 않아보인다.**<br /> 하지만 처리해야할 비동기 작업의 개수가 지금 처럼 다섯개가 아닌 50개, 500개 그 이상이 됐을 경우 promise를 사용하는 것이 훨씬 깔끔하다.
promise에서는 then을 연달아서 사용할 수 있기 때문이다.

```javascript
increaseNumber(0).then(n => {
    return increaseNumber(n)
}).then(n => {
    return increaseNumber(n)
}).then(n => {
    return increseNumber(n)
}).then(n => {
    return increseNumber(n)
}).then(n => {
    return increseNumber(n)
}).catch(e => { // 에러잡기
    console.error(e)
})
```

상단에 작성했던 callback함수를 이용한 비동기 작업과 비교했을 때, callback 함수는 코드가 깊어지는 반면 promise는 then 사용으로 인해 깊어지지 않고 깔끔하게 정리된 것을 볼 수 있다.
다만 우리가 작성한 코드는 n이 5가 되었을 때 실패하는(reject) 코드이므로 마지막에 .catch로 error를 잡아내어야 콘솔에서 확인할 수 있다.

사실 계속해서 값을 리턴해줄 필요도 없다.
우리가 필요한 것은 promise를 반환하는 함수를 넣어주면 되는 것이기 때문에, n을 불러와 return하는 부분을 지우고 그 자리에 바로 .then으로 붙여줘도 된다.

```javascript
increaseNumber(0).then(increaseNumber)
.then(increaseNumber)
.then(increaseNumber)
.then(increaseNumber)
.then(increaseNumber)
.catch(e => {
    console.error(e)
})
```


하지만 이렇게 깔끔한 promise에게도 불편한 부분이 존재한다.
error 발생 시, 어느 부분에서 error가 발생한 건지 파악하기가 어렵고, then으로 이어지기 때문에 특정 조건에 따라 나눈 작업도 어렵다. (결과가 x가 아니라 y일 경우에는 z하기 등)

이런 불편한 점들을 위해 **async await** 문법이 존재하는데, **async await** 문법은 다음 포스트에 작성해보겠다.