---
layout: post
title:  "Javascript-01. 동기 / 비동기 처리"

[//]: # (date:   2023-01-02 21:34:36 +0900)

[//]: # (categories: Javascript)
---

[//]: # (<h1>Introduction</h1>)

<h3>Javascript-01. 동기 / 비동기 처리</h3>

이번 글에서는 자바스크립트에서 비동기 처리를 어떻게 하는지에 대해서 작성하겠다.<br />
우선 동기적 처리와 비동기적 처리가 어떻게 다른지에 대한 설명을 아래 그림을 통해 알아보자.

<img src="/assets/javascript-01.png" height="400" width="300">

작업을 동기적으로 처리하게 된다면, 그림의 동기적 처리 부분처럼 순차적으로 작업을 진행하게 된다.
작업이 끝날때까지 기다리는 동안 중지상태가 되기 때문에 다른 작업을 할 수 없게 되는 것이다.

하지만 비동기적으로 작업을 처리하면 흐름이 멈추지 않고 기다리는 과정에서 다른 함수를 호출할 수도 있고 동시에 작업도 가능하다.

더욱 쉬운 이해를 위해 많은 작업을 처리하는 함수 예제를 만들어 보았다.

```javascript
function test () {
    const start = Date.now()  // javascript에 내장되어있는 기능으로, 현재 날짜를 숫자형태로 표시해줌.
    for (let i = 0; i < 1000000000; i++) {
        
    }
    const end = Date.now()
    console.log(end - start + '밀리초')
}

test()
console.log('동기적!')

```

예제를 살펴보면, test라는 함수를 만들었고 그 안에 start라는 객체를 선언하여 현재 시간을 밀리초로 나타내었다.
<br/>그리고 for문을 작성하여 i가 1000000000회 반복되고 난 후에 **end**가 받아온 **새로운 현재 시간**에서 처음에 **start**가 받았던 시간을 뺄셈하여
얼마나 걸렸는지 확인할 수 있다.

결과는 다음과 같다.

<img src="/assets/javascript-02.png" height="150" width="250" >

test 함수가 1000000000회 반복되고 난 후에야 '동기적!'이라는 콘솔이 찍힌 것을 확인 할 수 있는데,<br/>
이는 현재 작업을 동기적으로 처리하고 있기 때문이다.

<br/>
<br/>
<h3>그렇다면 비동기적으로 작업을 처리하려면 어떻게 해야할까?</h3>

자바스크립트에서는 setTimeout이라는 함수를 제공하고 있다.
이 setTimeout은 두가지 파라미터를 필요로 한다.

```javascript
setTimeout(()=> {
    
},숫자)
```
위와 같이 첫 번째 파라미터는 함수로 된 형태이고, 두 번째 파라미터는 숫자로 된 형태이다.
두 번째 파라미터는 숫자만큼의 시간이 흐른 후 특정 작업을 하겠다는 의미로 보면 된다.

setTimeout 함수 안에 기존에 작성했던 코드를 넣어주고, 하단에 콘솔 한 줄을 추가해보자.

```javascript
function test() {
    setTimeout(() => {
        const start = Date.now() // javascript에 내장되어있는 기능으로, 현재 날짜를 숫자형태로 표시해줌.
        for (let i = 0; i < 1000000000; i++) {}
        const end = Date.now()
        console.log(end - start + "밀리초")
    }, 0)
}
console.log("순서가 어떻게 될까요?")
test()
console.log("동기적!")

```

나는 두 번째 파라미터 안에 0이라는 숫자를 넣었다. **0밀리초 후에 호출**하겠다 라는 의미지만 브라우저에서 지정한 최소 값이 4밀리초여서
실제로는 4밀리초 후에 실행된다고 한다.

이렇게 setTimeout을 이용해서 함수를 호출하게 되면 해당 작업은 백그라운드에서 수행이 되고, 기존의 흐름을 막지 않아 동시에 다른 작업도 가능하게 된다.

이 상태에서 콘솔 값을 확인해 보면<br/> 기존에 for문이 전부 돌아가고 나서 동기적!이라는 콘솔이 찍혔을 때와 달리 for문이 돌아가는 중에 콘솔이 찍혀있음을 확인할 수 있다.

<img src="/assets/javascript-03.png" height="150" width="270">



++<br/>


<h3>함수가 끝난 후 특정 작업을 실행하고 싶다면?</h3>

추가로 함수가 끝난 후에 어떤 작업을 실행하고 싶다면 **callback 함수**를 사용해야 한다.
callback 함수는 함수 타입의 값을 파라미터로 넘겨주어 특정 작업이 끝난 후에 호출해주는 기능을 한다.

```javascript
function test(callback) { //callback 파라미터
    setTimeout(() => {
        const start = Date.now() // javascript에 내장되어있는 기능으로, 현재 날짜를 숫자형태로 표시해줌.
        for (let i = 0; i < 1000000000; i++) {}
        const end = Date.now()
        console.log(end - start + "밀리초")
        callback(end - start)
    }, 0);
}
console.log("순서가 어떻게 될까요?")
test((second)=> {
    console.log(second + '초 입니다!')
})
console.log("동기적!")
```

우선 기존 함수에 callback이라는 파라미터 값을 받아온 후 작업 하단에 callback으로 실행하고 싶은 내용을 작성하여 준다.
그리고 기존 test의 결과값을 보여주던 **test()** 안에 함수를 삽입하여 작업이 끝난 후 callback에서 호출한 **end-start**라는 결과값(second)과 문자열을 콘솔에 찍히도록 작성하면?


<img src="/assets/javascript-04.png" height="200" width="350">

짜잔! test의 작업이 완료된 후 callback함수를 통해 새로운 작업이 실행되었음을 확인할 수 있다.